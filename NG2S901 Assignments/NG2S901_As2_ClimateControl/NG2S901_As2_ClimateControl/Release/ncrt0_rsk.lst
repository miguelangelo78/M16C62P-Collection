* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon Mar 07 00:24:44 2016  PAGE 001

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

     1                                  ;*************************************************************************** ;
     2                                  ; C COMPILER for R8C/Tiny, M16C/60,30,20,10
     3                                  ; Copyright(C) 1999(2000-2004). Renesas Technology Corp.
     4                                  ; and Renesas Solutions Corp., All rights reserved.
     5                                  ;
     6                                  ;
     7                                  ; ncrt0.a30 : NC30 startup program
     8                                  ;
     9                                  ; This program is applicable when using the basic I/O library
    10                                  ;       
    11                                  ; $Id: ncrt0.a30,v 1.27.4.4 2004/10/29 14:06:38 simomura Exp $
    12                                  ;
    13                                  ;***************************************************************************
    14                                  
    15                                  ;--------------------------------------------------------------------
    16                                  ; set size of monitor area for FoUSB
    17                                  ;--------------------------------------------------------------------
    18                                  .if	_KD_
    19                            X     .if	_Firmware_space == 0
    20                            X     .else
    21                            X     .endif
    22                                  .endif
    23                                  ;---------------------------------------------------------------------
    24                                  ; HEEP SIZE definition
    25                                  ;---------------------------------------------------------------------
    26                                  .if	__HEAP__ == 1 
    27                                  .else
    28                                  
    29                                  .if	__HEAPSIZE__ == 0
    30  00000300h                       HEAPSIZE	.equ	300H
    31                                  .else
    32                                  .endif
    33                                  
    34                                  .endif
    35                                  
    36                                  ;---------------------------------------------------------------------
    37                                  ; STACK SIZE definition
    38                                  ;---------------------------------------------------------------------
    39                                  .if	__USTACKSIZE__ == 0
    40                                  .if	__R8C__ != 1
    41  00000300h                       STACKSIZE	.equ	300h
    42                                  .else
    43                                  .endif
    44                                  .else
    45                                  .endif
    46                                  
    47                                  ;---------------------------------------------------------------------
    48                                  ; INTERRUPT STACK SIZE definition
    49                                  ;---------------------------------------------------------------------
    50                                  .if	__ISTACKSIZE__ == 0
    51                                  .if	__R8C__ != 1
    52  00000300h                       ISTACKSIZE	.equ	300h
    53                                  .else
    54                                  .endif
    55                                  .else
    56                                  .endif
    57                                  
    58                                  ;---------------------------------------------------------------------
    59                                  ; INTERRUPT VECTOR ADDRESS  definition
    60                                  ;---------------------------------------------------------------------
    61                                  .if	__R8C__ != 1
    62                                  .if	_KD_ == 1
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon Mar 07 00:24:44 2016  PAGE 002

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

    63                                  .else
    64  000FFD00h                       VECTOR_ADR 	.equ	0ffd00h
    65  000FFE00h                       SVECTOR_ADR 	.equ	0ffe00h
    66                                  .endif // _KD_
    67                                  .else
    68                                  .endif
    69                                  
    70                                  ;---------------------------------------------------------------------
    71                                  ; Section allocation
    72                                  ;---------------------------------------------------------------------
    73                                  	.list OFF
    74                                  	.list ON
    75                                  
    76                                  ;---------------------------------------------------------------------
    77                                  ; SBDATA area definition
    78                                  ;---------------------------------------------------------------------
    79                                  	.glb	__SB__
    80  00000400h                       __SB__	.equ	data_SE_top
    81                                  
    82                                  ;====================================================================
    83                                  ; Initialize Macro declaration
    84                                  ;---------------------------------------------------------------------
    85                             D    N_BZERO	.macro	TOP_ ,SECT_
    86                             D    	mov.b	#00H, R0L
    87                             D    	mov.w	#(TOP_ & 0FFFFH), A1
    88                             D    	mov.w	#sizeof SECT_ , R3
    89                             D    	sstr.b	
    90                                  	.endm
    91                                  
    92                             D    N_BCOPY .macro	FROM_,TO_,SECT_
    93                             D    	mov.w	#(FROM_ & 0FFFFH),A0
    94                             D    	mov.b	#(FROM_ >>16),R1H
    95                             D    	mov.w	#TO_ ,A1
    96                             D    	mov.w	#sizeof SECT_ , R3
    97                             D    	smovf.b
    98                                  	.endm
    99                                  
   100                             D    BZERO	.macro	TOP_,SECT_
   101                             D    	push.w	#sizeof SECT_ >> 16
   102                             D    	push.w	#sizeof SECT_  & 0ffffh
   103                             D    	pusha	TOP_ >>16
   104                             D    	pusha	TOP_ & 0ffffh
   105                             D    	.stk	8
   106                             D    	.glb	_bzero	
   107                             D    	.call	_bzero,G
   108                             D    	jsr.a	_bzero
   109                                  	.endm
   110                                  
   111                             D    BCOPY	.macro	FROM_ ,TO_ ,SECT_
   112                             D    	push.w	#sizeof SECT_  >> 16
   113                             D    	push.w	#sizeof SECT_  & 0ffffh
   114                             D    	pusha	TO_ >>16
   115                             D    	pusha	TO_  & 0ffffh
   116                             D    	pusha	FROM_ >>16
   117                             D    	pusha	FROM_  & 0ffffh
   118                             D    	.stk	12
   119                             D    	.glb	_bcopy
   120                             D    	.call   _bcopy,G
   121                             D    	jsr.a	_bcopy
   122                                  	.endm
   123                                  
   124                                  .if	__R8C__ != 1
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon Mar 07 00:24:44 2016  PAGE 003

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   125                                  ;
   126                                  ; for M16C/60,30,20,10 series
   127                                  ;
   128                                  ;		.glb	__BankSelect
   129                                  ;__BankSelect	.equ	0BH
   130                                  
   131                                  ;---------------------------------------------------------------
   132                                  ; special page definition
   133                                  ;---------------------------------------------------------------
   134                                  ;       macro define for special page
   135                                  ;
   136                                  ;Format:
   137                                  ;	SPECIAL	number
   138                                  ;
   139                                  
   140                             D    SPECIAL	.macro	NUM
   141                             D    	.org	0FFFFEH-(NUM*2)
   142                             D    	.glb	__SPECIAL_@NUM
   143                             D    	.word	__SPECIAL_@NUM  & 0FFFFH
   144                                  .endm
   145                                  ;====================================================================
   146                                  ; Interrupt section start
   147                                  ;---------------------------------------------------------------------
   148                                  	.insf	start,S,0
   149                                  	.glb	start
   150                                  	.section	interrupt
   151  00000                           start:
   152                                  ;---------------------------------------------------------------------
   153                                  ; after reset,this program will start
   154                                  ;---------------------------------------------------------------------
   155  00000  EB400000r                	ldc	#istack_top,	isp	;set istack pointer
   156  00004  C7020A00              S  	mov.b	#02h,0ah
   157  00008  B70400                Z  	mov.b	#00h,04h		;set processer mode 
   158  0000B  B70A00                Z  	mov.b	#00h,0ah
   159  0000E  EB308000                 	ldc	#0080h,	flg
   160  00012  EB500000r                	ldc	#stack_top,	sp	;set stack pointer 
   161  00016  EB600004                 	ldc	#data_SE_top,	sb	;set sb register 
   162  0001A  EB200F00                 	ldintb	#VECTOR_ADR
               EB1000FD 
   163                                  
   164                                  ;====================================================================
   165                                  ; NEAR area initialize.
   166                                  ;--------------------------------------------------------------------
   167                                  ; bss zero clear
   168                                  ;--------------------------------------------------------------------
   169                                  	N_BZERO	bss_SE_top,bss_SE
   170  00022  B4                  M Z  	mov.b	#00H, R0L
   171  00023  AA0000r             M S  	mov.w	#(bss_SE_top & 0FFFFH), A1
   172  00026  75C30000r           M    	mov.w	#sizeof bss_SE , R3
   173  0002A  7CEA                M    	sstr.b	
   174                             M    	.endm
   175                                  	N_BZERO	bss_SO_top,bss_SO
   176  0002C  B4                  M Z  	mov.b	#00H, R0L
   177  0002D  AA0000r             M S  	mov.w	#(bss_SO_top & 0FFFFH), A1
   178  00030  75C30000r           M    	mov.w	#sizeof bss_SO , R3
   179  00034  7CEA                M    	sstr.b	
   180                             M    	.endm
   181                                  	N_BZERO	bss_NE_top,bss_NE
   182  00036  B4                  M Z  	mov.b	#00H, R0L
   183  00037  AA0000r             M S  	mov.w	#(bss_NE_top & 0FFFFH), A1
   184  0003A  75C30000r           M    	mov.w	#sizeof bss_NE , R3
   185  0003E  7CEA                M    	sstr.b	
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon Mar 07 00:24:44 2016  PAGE 004

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   186                             M    	.endm
   187                                  	N_BZERO	bss_NO_top,bss_NO
   188  00040  B4                  M Z  	mov.b	#00H, R0L
   189  00041  AA0000r             M S  	mov.w	#(bss_NO_top & 0FFFFH), A1
   190  00044  75C30000r           M    	mov.w	#sizeof bss_NO , R3
   191  00048  7CEA                M    	sstr.b	
   192                             M    	.endm
   193                                  
   194                                  ;---------------------------------------------------------------------
   195                                  ; initialize data section
   196                                  ;---------------------------------------------------------------------
   197                                  	N_BCOPY data_SEI_top,data_SE_top,data_SE
   198  0004A  A20000r             M S  	mov.w	#(data_SEI_top & 0FFFFH),A0
   199  0004D  74C300r             M    	mov.b	#(data_SEI_top >>16),R1H
   200  00050  AA0004              M S  	mov.w	#data_SE_top ,A1
   201  00053  75C30000r           M    	mov.w	#sizeof data_SE , R3
   202  00057  7CE8                M    	smovf.b
   203                             M    	.endm
   204                                  	N_BCOPY	data_SOI_top,data_SO_top,data_SO
   205  00059  A20000r             M S  	mov.w	#(data_SOI_top & 0FFFFH),A0
   206  0005C  74C300r             M    	mov.b	#(data_SOI_top >>16),R1H
   207  0005F  AA0000r             M S  	mov.w	#data_SO_top ,A1
   208  00062  75C30000r           M    	mov.w	#sizeof data_SO , R3
   209  00066  7CE8                M    	smovf.b
   210                             M    	.endm
   211                                  	N_BCOPY	data_NEI_top,data_NE_top,data_NE
   212  00068  A20000r             M S  	mov.w	#(data_NEI_top & 0FFFFH),A0
   213  0006B  74C300r             M    	mov.b	#(data_NEI_top >>16),R1H
   214  0006E  AA0000r             M S  	mov.w	#data_NE_top ,A1
   215  00071  75C30000r           M    	mov.w	#sizeof data_NE , R3
   216  00075  7CE8                M    	smovf.b
   217                             M    	.endm
   218                                  	N_BCOPY	data_NOI_top,data_NO_top,data_NO
   219  00077  A20000r             M S  	mov.w	#(data_NOI_top & 0FFFFH),A0
   220  0007A  74C300r             M    	mov.b	#(data_NOI_top >>16),R1H
   221  0007D  AA0000r             M S  	mov.w	#data_NO_top ,A1
   222  00080  75C30000r           M    	mov.w	#sizeof data_NO , R3
   223  00084  7CE8                M    	smovf.b
   224                             M    	.endm
   225                                  
   226                                  ;====================================================================
   227                                  ; FAR area initialize.
   228                                  ;---------------------------------------------------------------------
   229                                  ; bss zero clear
   230                                  ;---------------------------------------------------------------------
   231                                  	BZERO	bss_FE_top,bss_FE
   232  00086  7DE20000r           M    	push.w	#sizeof bss_FE >> 16
   233  0008A  7DE20000r           M    	push.w	#sizeof bss_FE  & 0ffffh
   234  0008E  7D9F0000r           M    	pusha	bss_FE_top >>16
   235  00092  7D9F0000r           M    	pusha	bss_FE_top & 0ffffh
   236                             M    	.stk	8
   237                             M    	.glb	_bzero	
   238                             M    	.call	_bzero,G
   239  00096  FD000000r           M A  	jsr.a	_bzero
   240                             M    	.endm
   241                                  	BZERO	bss_FO_top,bss_FO
   242  0009A  7DE20000r           M    	push.w	#sizeof bss_FO >> 16
   243  0009E  7DE20000r           M    	push.w	#sizeof bss_FO  & 0ffffh
   244  000A2  7D9F0000r           M    	pusha	bss_FO_top >>16
   245  000A6  7D9F0000r           M    	pusha	bss_FO_top & 0ffffh
   246                             M    	.stk	8
   247                             M    	.glb	_bzero	
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon Mar 07 00:24:44 2016  PAGE 005

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   248                             M    	.call	_bzero,G
   249  000AA  FD000000r           M A  	jsr.a	_bzero
   250                             M    	.endm
   251                                  
   252                                  ;---------------------------------------------------------------------
   253                                  ; Copy edata_E(O) section from edata_EI(OI) section
   254                                  ;---------------------------------------------------------------------
   255                                  	BCOPY	data_FEI_top,data_FE_top,data_FE
   256  000AE  7DE20000r           M    	push.w	#sizeof data_FE  >> 16
   257  000B2  7DE20000r           M    	push.w	#sizeof data_FE  & 0ffffh
   258  000B6  7D9F0100            M    	pusha	data_FE_top >>16
   259  000BA  7D9F0000            M    	pusha	data_FE_top  & 0ffffh
   260  000BE  7D9F0000r           M    	pusha	data_FEI_top >>16
   261  000C2  7D9F0000r           M    	pusha	data_FEI_top  & 0ffffh
   262                             M    	.stk	12
   263                             M    	.glb	_bcopy
   264                             M    	.call   _bcopy,G
   265  000C6  FD000000r           M A  	jsr.a	_bcopy
   266                             M    	.endm
   267                                  	BCOPY	data_FOI_top,data_FO_top,data_FO
   268  000CA  7DE20000r           M    	push.w	#sizeof data_FO  >> 16
   269  000CE  7DE20000r           M    	push.w	#sizeof data_FO  & 0ffffh
   270  000D2  7D9F0000r           M    	pusha	data_FO_top >>16
   271  000D6  7D9F0000r           M    	pusha	data_FO_top  & 0ffffh
   272  000DA  7D9F0000r           M    	pusha	data_FOI_top >>16
   273  000DE  7D9F0000r           M    	pusha	data_FOI_top  & 0ffffh
   274                             M    	.stk	12
   275                             M    	.glb	_bcopy
   276                             M    	.call   _bcopy,G
   277  000E2  FD000000r           M A  	jsr.a	_bcopy
   278                             M    	.endm
   279                                  
   280  000E6  EB500000r                	ldc	#stack_top,sp
   281                                  	.stk	-40
   282                                  
   283                                  ;====================================================================
   284                                  ; heap area initialize
   285                                  ;---------------------------------------------------------------------
   286                                  .if __HEAP__ != 1
   287                                  	.glb	__mbase
   288                                  	.glb	__mnext
   289                                  	.glb	__msize
   290  000EA  75CF0000r0000r           	mov.w	#(heap_top&0FFFFH), __mbase
   291  000F0  75CF0000r0000r           	mov.w	#(heap_top>>16), __mbase+2
   292  000F6  75CF0000r0000r           	mov.w	#(heap_top&0FFFFH), __mnext
   293  000FC  75CF0000r0000r           	mov.w	#(heap_top>>16), __mnext+2
   294  00102  75CF0000r0003            	mov.w	#(HEAPSIZE&0FFFFH), __msize
   295  00108  D90F0000r             Q  	mov.w	#(HEAPSIZE>>16), __msize+2
   296                                  .endif
   297                                  
   298                                  ;====================================================================
   299                                  ; Initialize standard I/O
   300                                  ; _init changed to _initialise 08/07/05 DDE
   301                                  ;---------------------------------------------------------------------
   302                                  ;.if __STANDARD_IO__ == 1
   303                                  	.glb	_main
   304                                  	.call	_main,G
   305  0010C  FD000000r             A  	jsr.a	_main
   306                                  ;.endif
   307                                  
   308                                  ;====================================================================
   309                                  ; Call main() function
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon Mar 07 00:24:44 2016  PAGE 006

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   310                                  ; Main called from initialise() in resetprg.c 08/07/05 DDE
   311                                  ;---------------------------------------------------------------------
   312                                  ;	ldc	#0h,fb	; for debuger
   313                                  
   314                                  ;	.glb	_main
   315                                  ;	jsr.a	_main
   316                                  
   317                                  .else	; __R8C__
   318                            X     .if __HEAP__ != 1
   319                            X     .endif
   320                            X     .if __STANDARD_IO__ == 1
   321                            X     .endif
   322                                  .endif	; __R8C__
   323                                  
   324                                  ;====================================================================
   325                                  ; exit() function
   326                                  ;---------------------------------------------------------------------
   327                                  	.glb	_exit
   328                                  	.glb	$exit
   329  00110                           _exit:			   ; End program
   330  00110                           $exit:
   331  00110  FEFF                  B  	jmp	_exit
   332                                  	.einsf
   333                                  ;====================================================================
   334                                  ; dummy interrupt function
   335                                  ;---------------------------------------------------------------------
   336                                  
   337                                  	.glb	dummy_int
   338  00112                           dummy_int:
   339  00112  FB                       	reit
   340                                  
   341                                  	.end

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00341   LINES

Section List

Attr        Size          Name
DATA     0000000(00000H)  data_SE
DATA     0000000(00000H)  bss_SE
DATA     0000000(00000H)  data_SO
DATA     0000000(00000H)  bss_SO
DATA     0000000(00000H)  data_NE
DATA     0000000(00000H)  bss_NE
DATA     0000000(00000H)  data_NO
DATA     0000000(00000H)  bss_NO
DATA     0001536(00600H)  stack
DATA     0000768(00300H)  heap
ROMDATA  0000000(00000H)  rom_NE
ROMDATA  0000000(00000H)  rom_NO
DATA     0000000(00000H)  data_FE
DATA     0000000(00000H)  bss_FE
DATA     0000000(00000H)  data_FO
DATA     0000000(00000H)  bss_FO
ROMDATA  0000000(00000H)  rom_FE
ROMDATA  0000000(00000H)  rom_FO
ROMDATA  0000000(00000H)  data_SEI
ROMDATA  0000000(00000H)  data_SOI
ROMDATA  0000000(00000H)  data_NEI
ROMDATA  0000000(00000H)  data_NOI
ROMDATA  0000000(00000H)  data_FEI
ROMDATA  0000000(00000H)  data_FOI
ROMDATA  0000000(00000H)  switch_table
CODE     0000000(00000H)  program
CODE     0000000(00000H)  interrupt
CODE     0000000(00000H)  program_S
ROMDATA  0000256(00100H)  vector
ROMDATA  0000000(00000H)  svector
ROMDATA  0000004(00004H)  fvector
CODE     0000275(00113H)  interrupt
